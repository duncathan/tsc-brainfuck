#0000
<END

~~~~~~~~~~~~~~~~
RETN instruction
~~~~~~~~~~~~~~~~
#0001
<FL+_RTN
<FLJ_RA0:0002<FLJ_RA1:0002<FLJ_RA2:0002<FLJ_RA3:0002
<FLJ_RA4:0002<FLJ_RA5:0002<FLJ_RA6:0002<FLJ_RA7:0002
<EVE0003
#0002
<TRA0010:2800:0000:0000 Load RA into A

#0003
<EVE0004 Normal return; pop the return address into A
#0004
<EVEXXXX Run codec with _RTN flag set (calls the appropriate function)

~~~~~~~~~~~~~~~~
PUSH instruction
~~~~~~~~~~~~~~~~

----
Place A into the top of the stack
----
RA = 1
#0012
<FL+_RA0<FL-_RA1<FL-_RA2<FL-_RA3
<FL-_RA4<FL-_RA5<FL-_RA6<FL-_RA7

<TRA0010:3700:0000:0000 Store A into SD

----
Increment the stack pointer
----
RA = 2
#0013
<FL-_RA0<FL+_RA1
<FL-__DS

<TRA0010:2600:0000:0000 Load SP into A

RA = 3, DS = 0
#0014
<FL+_RA0

<EVEXXXX Run ALU (Increments SP)

RA = 4
#0015
<FL-_RA0<FL-_RA1<FL+_RA2

<TRA0010:3600:0000:0000 Store A into SP

----
Set A to one less than the provided return address
----
RA = 5
#0016
<FL+_RA0

<TRA0010:2700:0000:0000 Load SD into A

RA = 6
#0017
<FL-_RA0<FL+_RA1
<FL+__DS

<EVEXXXX Run ALU (Decrements A)

----
Set the stack data register to 0
----
SD = 0
#0018
<FL-_SD0<FL-_SD1<FL-_SD2<FL-_SD3
<FL-_SD4<FL-_SD5<FL-_SD6<FL-_SD7

<EVE0020

----
Store A into RA
----
#0020
<FLJ__A0:0021
<FL-_RA0<EVE0022
#0021
<FL+_RA0<EVE0022
#0022
<FLJ__A1:0023
<FL-_RA1<EVE0024
#0023
<FL+_RA1<EVE0024
#0024
<FLJ__A2:0025
<FL-_RA2<EVE0026
#0025
<FL+_RA2<EVE0026
#0026
<FLJ__A3:0027
<FL-_RA3<EVE0028
#0027
<FL+_RA3<EVE0028
#0028
<FLJ__A4:0029
<FL-_RA4<EVE0020
#0029
<FL+_RA4<EVE0020
#0020
<FLJ__A5:0021
<FL-_RA5<EVE0022
#0021
<FL+_RA5<EVE0022
#0022
<FLJ__A6:0023
<FL-_RA6<EVE0024
#0023
<FL+_RA6<EVE0024
#0024
<FLJ__A7:0025
<FL-_RA7<EVE0001 Return
#0025
<FL+_RA7<EVE0001 Return